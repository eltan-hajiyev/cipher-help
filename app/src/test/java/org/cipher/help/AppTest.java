/*
 * This source file was generated by the Gradle 'init' task
 */
package org.cipher.help;

import lombok.RequiredArgsConstructor;
import org.apache.commons.collections4.queue.CircularFifoQueue;
import org.junit.Assert;
import org.junit.Test;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.stream.IntStream;

public class AppTest {


    @Test
    public void appHasAGreeting() {
        List<IndexManipulatorInterface> indexManipulatorInterfaceList =
                List.of(new IndexManipulatorHelger(),
                        new IndexManipulatorProtobuf(),
                        new IndexManipulatorHelgerFixedBits());

        var args = getArguments();


        for (Pair arg : args) {
            var results = new CircularFifoQueue<List<String>>(2);
            var evalResults = new ArrayList<Integer>();
            System.out.println("\n\n==========");
            for (IndexManipulatorInterface indexManipulatorInterface : indexManipulatorInterfaceList) {
                var indices = indexManipulatorInterface.createIndicesToken(arg.sourceList, arg.searchList);
                var searchList2 = indexManipulatorInterface.decodeIndicesToken(arg.sourceList, indices);

                results.add(searchList2);
                evalResults.add(indices.length());

                System.out.println("Success: " + indexManipulatorInterface.getClass());

                if (results.size() == 2) {
                    Assert.assertArrayEquals(results.get(0).toArray(), results.get(1).toArray());
                }
            }
            System.out.println(evalResults);
        }
    }

    private static List<Pair> getArguments() {
        List<Pair> va = new ArrayList<>(IntStream.range(0, 100)
                .mapToObj(i -> Pair.of(getList(), getList()))
                .toList());

        va.add(Pair.of(getList(30, 300), getList(30, 300)));
        va.add(Pair.of(getList(30, 300), getList(5, 380)));

        return va;
    }

    private static List<String> getList() {
        return getList(new Random().nextInt(50), new Random().nextInt(60, 1500));
    }

    private static List<String> getList(Integer begin, Integer end) {
        return IntStream.range(begin, end).mapToObj(i -> "GROUP" + i).toList();
    }


    @RequiredArgsConstructor
    private static class Pair {
        private final List<String> sourceList;
        private final List<String> searchList;

        private static Pair of(List<String> sourceList, List<String> searchList) {
            return new Pair(sourceList, searchList);
        }
    }

}
